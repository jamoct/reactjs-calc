{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","result","handleClick","button","setState","deleted","toString","slice","calculate","eval","e","className","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mzCAGqBA,I,ssBAEnBC,MAAQ,CACNC,OAAQ,I,MAGVC,YAAc,SAAAC,GAMZ,GAJe,UAAXA,GACF,MAAKC,SAAS,CAACH,OAAQ,KAGV,QAAXE,EAAkB,CACpB,IACIE,EADS,MAAKL,MAAMC,OAAOK,WACVC,MAAM,GAAI,GAC/B,MAAKH,SAAS,CAACH,OAAQI,IAGV,WAAXF,EACF,MAAKK,YAGa,UAAXL,GAAiC,QAAXA,GAC7B,MAAKC,SAAS,CAACH,OAAQ,MAAKD,MAAMC,OAASE,K,MAK/CK,UAAY,WACV,IACE,IAAIP,OAASQ,KAAK,MAAKT,MAAMC,QAC7B,MAAKG,SAAS,CAACH,OAAQA,SAEzB,MAAOS,GACL,MAAKN,SAAS,CAACH,OAAQ,Y,oVAIhB,IAAD,OAER,OACE,sEACE,kEAAKU,UAAU,aACb,kEAAKA,UAAU,UACZC,KAAKZ,MAAMC,QAEd,kEAAKU,UAAU,UACb,qEAAQE,QAAS,kBAAM,EAAKX,YAAY,WAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,SAAxC,OACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,MAEF,kEAAKS,UAAU,UACb,qEAAQE,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,MAEF,kEAAKS,UAAU,UACb,qEAAQE,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,MAEF,kEAAKS,UAAU,UACb,qEAAQE,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,KACA,qEAAQW,QAAS,kBAAM,EAAKX,YAAY,OAAxC,MAEF,kEAAKS,UAAU,gBAAgBE,QAAS,kBAAM,EAAKX,YAAY,YAC7D,qF,KAvEqBY,+C,qKCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACtB,EAAA,EAAD,MAASuB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b604bed1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nexport default class App extends Component {\n\n  state = {\n    result: \"\"\n  }\n\n  handleClick = button => {\n\n    if (button === \"CLEAR\") {\n      this.setState({result: \"\"});\n    }\n\n    if (button === \"DEL\") {\n      let result = this.state.result.toString();\n      let deleted = result.slice(0, -1);\n      this.setState({result: deleted});\n    }\n\n    if (button === \"EQUALS\") {\n      this.calculate();\n    }\n  \n    else if (button !== \"CLEAR\" && button !== \"DEL\") {\n      this.setState({result: this.state.result + button});\n    }\n\n  }\n\n  calculate = () => {\n    try {\n      let result = eval(this.state.result);\n      this.setState({result: result});\n    }\n    catch (e) {\n      this.setState({result: 'Error'});\n    }\n  }\n\n  render () {\n\n    return (\n      <div>\n        <div className=\"calc-body\">\n          <div className=\"result\">\n            {this.state.result}\n          </div>\n          <div className=\"keypad\">\n            <button onClick={() => this.handleClick('CLEAR')}>C</button>\n            <button onClick={() => this.handleClick('0')}>0</button>\n            <button onClick={() => this.handleClick('DEL')}>DEL</button>\n            <button onClick={() => this.handleClick('/')}>/</button>\n          </div>\n          <div className=\"keypad\">\n            <button onClick={() => this.handleClick('7')}>7</button>\n            <button onClick={() => this.handleClick('8')}>8</button>\n            <button onClick={() => this.handleClick('9')}>9</button>\n            <button onClick={() => this.handleClick('*')}>X</button>\n          </div>\n          <div className=\"keypad\">\n            <button onClick={() => this.handleClick('4')}>4</button>\n            <button onClick={() => this.handleClick('5')}>5</button>\n            <button onClick={() => this.handleClick('6')}>6</button>\n            <button onClick={() => this.handleClick('+')}>+</button>\n          </div>\n          <div className=\"keypad\">\n            <button onClick={() => this.handleClick('1')}>1</button>\n            <button onClick={() => this.handleClick('2')}>2</button>\n            <button onClick={() => this.handleClick('3')}>3</button>\n            <button onClick={() => this.handleClick('-')}>-</button>\n          </div>\n          <div className=\"keypad-equals\" onClick={() => this.handleClick('EQUALS')}>\n            <button>=</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}